<style>
  /* Modal Overlay */
  #access-control-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(30, 41, 59, 0.45);
    display: none;
    z-index: 1000;
    justify-content: center;
    align-items: center;
    transition: background 0.2s;
  }

  /* Modal Content */
  .modal-content {
    background: linear-gradient(135deg, #f8fafc 0%, #e9ecef 100%);
    border-radius: 14px;
    padding: 32px 28px 24px 28px;
    width: 420px;
    max-width: 90vw;
    margin: 0 auto;
    box-shadow: 0 8px 32px rgba(30,41,59,0.18);
    z-index: 1100;
    position: relative;
    border: 1px solid #e3e3e3;
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }

  /* Close Button */
  .close-button {
    position: absolute;
    top: 18px;
    right: 18px;
    font-size: 22px;
    color: #64748b;
    cursor: pointer;
    background: none;
    border: none;
    transition: color 0.15s;
  }
  .close-button:hover {
    color: #1e293b;
  }

  /* Input Field and Button Styling */
  #username-search-container {
    display: flex;
    align-items: center;
    margin-bottom: 18px;
    gap: 10px;
  }

  #username-input {
    flex: 1;
    padding: 11px 14px;
    font-size: 16px;
    border: 1px solid #cbd5e1;
    border-radius: 6px;
    background: #f1f5f9;
    transition: border 0.2s;
  }
  #username-input:focus {
    border: 1.5px solid #007bff;
    outline: none;
    background: #fff;
  }

  #search-button {
    padding: 11px 18px;
    font-size: 16px;
    cursor: pointer;
    background: #2563eb;
    color: #fff;
    border: none;
    border-radius: 6px;
    transition: background 0.18s;
    font-weight: 500;
  }
  #search-button:hover {
    background: #1d4ed8;
  }

  /* Permissions Section */
  #permissions-container {
    margin-top: 18px;
    background: #f8fafc;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    padding: 18px 14px 10px 14px;
    box-shadow: 0 2px 8px rgba(30,41,59,0.04);
  }
  .permission-item {
    margin-bottom: 10px;
    font-size: 15px;
    color: #334155;
    display: flex;
    align-items: center;
    gap: 8px;
  }
  .permission-item input[type="checkbox"] {
    accent-color: #2563eb;
    width: 18px;
    height: 18px;
  }
  #update-permissions-button {
    margin-top: 12px;
    padding: 12px 0;
    font-size: 17px;
    background: #22c55e;
    color: #fff;
    border: none;
    border-radius: 7px;
    cursor: pointer;
    font-weight: 600;
    letter-spacing: 0.01em;
    box-shadow: 0 2px 8px rgba(34,197,94,0.08);
    transition: background 0.18s;
    width: 100%;
  }
  #update-permissions-button:hover {
    background: #16a34a;
  }

  /* Headings and text */
  .modal-content h2 {
    font-size: 1.45rem;
    font-weight: 700;
    color: #1e293b;
    margin-bottom: 6px;
    letter-spacing: 0.01em;
  }
  #user-info p {
    color: #334155;
    font-size: 1rem;
    margin-bottom: 8px;
    font-weight: 500;
  }
</style>

<div id="access-control-modal">
  <div class="modal-content">
    <button class="close-button" id="close-access-control-modal">&times;</button>
    <h2>Access Control</h2>
    <div id="username-search-container">
      <input type="text" id="username-input" placeholder="Type username" />
      <button id="search-button">üîç Search</button>
    </div>
    <div id="user-info">
      <!-- This section will display the user information dynamically -->
    </div>
    <div id="permissions-container" style="display: none;">
      <p style="font-size: 1.05rem; color: #64748b; margin-bottom: 12px;">Select or modify this user's permissions:</p>
      <label class="permission-item">
        <input type="checkbox" id="admin-rights" /> Admin Roles
      </label>
      <label class="permission-item">
        <input type="checkbox" id="supervisor-rights" /> Supervisor Roles
      </label>
      <label class="permission-item">
        <input type="checkbox" id="personnel-rights" /> User Roles
      </label>
      <button id="update-permissions-button" class="btn btn-success d-block mt-3">Update Permissions</button>
    </div>
  </div>
</div>

<script>
  // Toast notification utility
  function showToast(message, type = 'success') {
    let toast = document.createElement('div');
    toast.className = 'custom-toast-notification ' + (type === 'success' ? 'toast-success' : 'toast-error');
    toast.innerText = message;
    toast.style.position = 'fixed';
    toast.style.bottom = '30px';
    toast.style.right = '30px';
    toast.style.background = type === 'success' ? '#22c55e' : '#dc3545';
    toast.style.color = '#fff';
    toast.style.padding = '16px 28px';
    toast.style.borderRadius = '8px';
    toast.style.fontSize = '1.1rem';
    toast.style.boxShadow = '0 2px 12px rgba(0,0,0,0.18)';
    toast.style.zIndex = 12000;
    document.body.appendChild(toast);
    setTimeout(() => { toast.remove(); }, 2500);
  }

  // Modal confirmation utility
  function showConfirmModal(message, onConfirm) {
    const modal = document.createElement('div');
    modal.style.position = 'fixed';
    modal.style.top = 0;
    modal.style.left = 0;
    modal.style.width = '100vw';
    modal.style.height = '100vh';
    modal.style.background = 'rgba(0,0,0,0.4)';
    modal.style.display = 'flex';
    modal.style.justifyContent = 'center';
    modal.style.alignItems = 'center';
    modal.style.zIndex = 12001;
    modal.innerHTML = `<div style="background: white; padding: 30px 40px; border-radius: 12px; box-shadow: 0 4px 24px rgba(0,0,0,0.18); font-size: 1.2rem; min-width: 250px; text-align: center;">
      <span>${message}</span><br><br>
      <button class='btn btn-success' id='confirmYes'>Yes</button>
      <button class='btn btn-secondary' id='confirmNo'>No</button>
    </div>`;
    document.body.appendChild(modal);
    document.getElementById('confirmYes').onclick = function() {
      modal.remove();
      onConfirm();
    };
    document.getElementById('confirmNo').onclick = function() {
      modal.remove();
    };
  }

  document.addEventListener("DOMContentLoaded", () => {
    const accessControlModal = document.getElementById("access-control-modal");
    const closeAccessControlModal = document.getElementById("close-access-control-modal");
    const accessControlButton = document.getElementById("access-control-button");
    const searchButton = document.getElementById("search-button");
    const usernameInput = document.getElementById("username-input");
    const userInfo = document.getElementById("user-info");
    const permissionsContainer = document.getElementById("permissions-container");
    const updatePermissionsButton = document.getElementById("update-permissions-button");
    const editDepartmentModal = document.getElementById("edit-department-modal");

    const checkboxes = [
      document.getElementById("admin-rights"),
      document.getElementById("supervisor-rights"),
      document.getElementById("personnel-rights")
    ];

    // Open Modal
    accessControlButton.addEventListener("click", (e) => {
      e.preventDefault();
      accessControlModal.style.display = "flex";
    });

    // Close Modal
    closeAccessControlModal.addEventListener("click", () => {
      accessControlModal.style.display = "none";
    });

    // Fetch User Info
    searchButton.addEventListener("click", async () => {
  const username = usernameInput.value.trim();
  console.log(typeof(username) + " username: " + username);
  
  if (!username) return showToast("Please enter a username.", 'error');

  try {
    const response = await fetch(`/admin/searchUsers?usernames=${username}`);
    if (!response.ok) throw new Error("User not found.");

    const data = await response.json();
    
    console.log("Received data:", data); // Debugging line

    userInfo.innerHTML = ""; // Clear previous results

    // Handle both cases: single user (object) or multiple users (array)
    if (Array.isArray(data)) {
      // Multiple users received
      data.forEach(user => {
        userInfo.innerHTML += `<p>Username: <strong>${user.username}</strong></p>`;
      });
    } else {
      // Single user received (object)
      userInfo.innerHTML = `<p>Username: <strong>${data.username}</strong></p>`;
    }

    permissionsContainer.style.display = "block";
  } catch (error) {
    showToast("Error: " + error.message, 'error');
  }
});


    // Ensure Only One Checkbox Can Be Checked
    checkboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", () => {
        if (checkbox.checked) {
          checkboxes.forEach((otherCheckbox) => {
            if (otherCheckbox !== checkbox) {
              otherCheckbox.checked = false; // Uncheck other checkboxes
            }
          });
        }
      });
    });

    // Update Permissions
    updatePermissionsButton.addEventListener("click", async () => {
      showConfirmModal("Are you sure you want to update permissions?", async () => {
        const username = usernameInput.value.trim();
        const permissions = {
          admin: document.getElementById("admin-rights").checked,
          supervisor: document.getElementById("supervisor-rights").checked,
          personnel: document.getElementById("personnel-rights").checked,
        };

        try {
          const response = await fetch(`/admin/searchUsers/permissions?usernames=${username}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(permissions),
          });

          if (!response.ok) throw new Error("Failed to update permissions.");
          showToast("Permissions updated successfully.");
          accessControlModal.style.display = "none";
        } catch (error) {
          showToast("Error: " + error.message, 'error');
        }
      });
    });
  });
</script>