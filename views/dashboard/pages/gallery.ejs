<style>

#full-screen-preview {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.9);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

#preview-content {
  max-width: 90%;
  max-height: 90%;
  overflow: auto;
  background: white;
  padding: 20px;
  border-radius: 10px;
}

#close-preview {
  position: absolute;
  top: 10px;
  right: 10px;
  background: red;
  color: white;
  border: none;
  padding: 10px;
  cursor: pointer;
}

.preview-image {
  max-width: 100%;
  height: auto;
}

.preview-text {
  font-size: 16px;
  color: black;
}

  .folder-icon {
    margin-right: 5px;
  }

  .file-icon {
    margin-right: 5px;
  }

  .file-name {
    cursor: pointer;
    color: blue;
  }

  .file-content {
    border: 1px solid #ccc;
    height: 300px;
    overflow-y: auto;
    padding: 15px;
  }

  .sub-items {
    margin-left: 20px;
  }

  .file-name:hover {
    text-decoration: underline;
  }

  .folder-button {
    all: unset;
    cursor: pointer;
  }

  .folder-button:hover {
    text-decoration: underline;
  }
</style>
<style>
  .file-item {
    display: flex;
    align-items: center;
  }

  .file-checkbox {
    margin-right: 10px;
  }

  .box-shadow {
    box-shadow: 2px 2px 4px 4px rgba(0, 0, 0, 0.1);
    padding: 20px;
    border-radius: 8px;
    background-color: #ffffff;
  }
</style>
<style>
  /* Simple modal styling */
  #searchResultsModal {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(0,0,0,0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  }

  #filesModalContent {
    background: white;
    padding: 20px;
    border-radius: 10px;
    max-height: 80%;
    overflow-y: auto;
  }

  #matchedFilesList {
    list-style: none;
    padding: 0;
  }

  #matchedFilesList li {
    margin: 5px 0;
  }
</style>

<div class="container mt-5 mb-5">
  <div class="mb-3">
    <em id="fileSearchInfo" style="color: rgb(5, 196, 5); display: none;">Enter a search date in this format (d-m-yyy)</em>
    <div class="input-group">
      <div class="input-group-prepend " id="searchButton">
        <span class="input-group-text mobile-search"><i class="fa fa-search"></i></span>
      </div>
      <input 
        id="search-input" 
        class="form-control" 
        type="text" 
        placeholder="Search Here........"
      >
    </div>
  </div>
  <div class="row">
    <!-- Folder Panel -->
    <% if (auths && auths.view_upload) { %>
    <div class="bg-white box-shadow col-4 border p-3">
      <div id="folder-tree">
        <% 
        // Function to render a folder
        function renderFolder(key, structure, parentKey = '') { 
        %>
        <div>
          <% const currentPath = parentKey ? `${parentKey}/${key}` : key; %>
          <button class="folder-button" data-folder="<%= currentPath %>">
            <i class="fas fa-folder folder-icon"></i>
            <strong><%= key %></strong>
          </button>
          <div class="sub-items" style="display: none;">
            <% renderStructure(structure, currentPath); %>
          </div>
        </div>
        <% } %>
        <% 
        // Function to render files in a folder
        function renderFiles(files) { 
        %>
        <% files.forEach(file => { %>
        <div class="file-item">
          <input type="checkbox" class="file-checkbox" data-file="<%= file %>" style="display: none;" />
          <span class="file-icon"><i class="fas fa-file"></i></span>
          <span id="fileName" class="file-name" data-file="<%= file %>"><%= file %></span>
        </div>
        <% }) %>
        <% } %>
        <% 
        // Function to render the folder structure recursively
        function renderStructure(structure, parentKey = '') { 
        %>
        <% for (let key in structure) { %>
        <% if (key === 'files') { %>
        <% renderFiles(structure[key]); %>
        <% } else if (Array.isArray(structure[key])) { %>
        <% renderFiles(structure[key]); %>
        <% } else { %>
        <% renderFolder(key, structure[key], parentKey); %>
        <% } %>
        <% } %>
        <% } %>
        <% 
        // Render the file structure if available
        if (fileStructure) { 
          renderStructure(fileStructure); 
        } 
        %>
      </div>
    </div>
    <% } %>

    <!-- File Viewer Panel -->
    <div class="col-8">
      <div class="bg-white box-shadow file-content" id="file-viewer">
        <em>Select a file to preview its content here.</em>
      </div>

      <!-- Pick and send -->
      <div>
        <button id="pick-send-button" class="btn btn-primary mt-3">Pick & Send</button>

        <% if (auths && auths.is_admin) { %>
        <button id="delete-button" class="btn btn-secondary mt-3">Delete</button>
        <% } %>
        <button id="cancel-delete-button" style="display: none;" class="btn btn-secondary mt-3">Cancel Delete</button>
        <button id="send-button" style="display: none;" class="btn btn-success mt-3">Send</button>
        <p id="select-file-message" style="display: none; color: green;">Please select a file.</p>
        <p id="delete-info" class="delete-info" style="display: none;">Select file(s) to delete.</p>
      </div>
    </div>

    <div id="searchResultsModal" style="display: none;">
      <div id="filesModalContent" style="width: 30%;">
        <h2>Matched Files</h2>
        <ul id="matchedFilesList"></ul>
        <button class="btn btn-primary" id="closeFilesModalButton">Close</button>
      </div>
    </div>
  </div>
</div>

<%- contentFor("pageHeader") %>
<%- include('../components/page-title.ejs', {title: 'View Files' }) %>
<%- contentFor("customJS") %>


<script>
  // Log user authorizations to the browser console for debugging
  // window.auths = <%- JSON.stringify(auths) %>;
  // console.log('User authorizations:', window.auths);
  // console.log('File structure:', <%- JSON.stringify(fileStructure) %>);
</script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
  // DOM elements
  const pickSendButton = document.getElementById("pick-send-button");
  const selectFileMessage = document.getElementById("select-file-message");
  const sendOptions = document.getElementById("send-options");
  const deleteButton = document.getElementById("delete-button");
  const cancelDeleteButton = document.getElementById("cancel-delete-button");
  const deleteInfo = document.getElementById("delete-info");
  const fileCheckboxes = document.querySelectorAll(".file-checkbox");
  const sendButton = document.getElementById("send-button");

  // State variables
  let selectedFilesForSending = [];
  let selectedFilesForDeleting = [];
  let isDeleteModeActive = false;
  let isPickSendModeActive = false;

  // Initialize global state
  window.selectedFiles = [];

  // Event listeners
  pickSendButton.addEventListener("click", togglePickSendMode);

  fileCheckboxes.forEach(checkbox => {
    checkbox.addEventListener("change", handleFileCheckboxChange);
  });


  deleteButton.addEventListener("click", toggleDeleteMode);

  cancelDeleteButton.addEventListener("click", cancelDeleteMode);

  // Functions

  /**
   * Toggles between normal and pick & send modes.
   */
  function togglePickSendMode() {
    if (isPickSendModeActive) {
      resetPickSendMode();
    } else {
      activatePickSendMode();
    }
  }

  /**
   * Resets the UI to the default state after canceling pick & send mode.
   */
  function resetPickSendMode() {
    selectFileMessage.style.display = "none";
    fileCheckboxes.forEach(checkbox => {
      checkbox.style.display = "none";
      checkbox.checked = false;
    });
    pickSendButton.innerText = "Pick & Send";
    pickSendButton.classList.remove("btn-danger");
    pickSendButton.classList.add("btn-primary");
    deleteButton.style.display = "inline-block";
    isPickSendModeActive = false;
  }

  /**
   * Activates the pick & send mode in the UI.
   */
  function activatePickSendMode() {
    selectFileMessage.style.display = "block";
    fileCheckboxes.forEach(checkbox => {
      checkbox.style.display = "inline-block";
      checkbox.checked = false;
    });
    pickSendButton.innerText = "Cancel file sending";
    pickSendButton.classList.remove("btn-primary");
    pickSendButton.classList.add("btn-danger");
    deleteButton.style.display = "none";
    isPickSendModeActive = true;
    // Reveal all folders in the folder tree
    document.querySelectorAll('#folder-tree .sub-items').forEach(el => {
      el.style.display = 'block';
    });
  }

  /**
   * Handles changes in file checkboxes.
   */
  function handleFileCheckboxChange(event) {
    const fileName = event.target.dataset.file;

    if (isDeleteModeActive) {
      updateSelectedFilesForDeleting(fileName, event.target.checked);
    } else if (isPickSendModeActive) {
      updateSelectedFilesForSending(fileName, event.target.checked);
    }

    updateUIBasedOnSelection();
  }

  /**
   * Updates the list of files selected for sending.
   * @param {string} fileName - The name of the file.
   * @param {boolean} isChecked - Whether the checkbox is checked.
   */
  function updateSelectedFilesForSending(fileName, isChecked) {
    if (isChecked) {
      if (!selectedFilesForSending.includes(fileName)) {
        selectedFilesForSending.push(fileName);
      }
    } else {
      selectedFilesForSending = selectedFilesForSending.filter(file => file !== fileName);
    }
  }

  /**
   * Updates the list of files selected for deletion.
   * @param {string} fileName - The name of the file.
   * @param {boolean} isChecked - Whether the checkbox is checked.
   */
  function updateSelectedFilesForDeleting(fileName, isChecked) {
    if (isChecked) {
      if (!selectedFilesForDeleting.includes(fileName)) {
        selectedFilesForDeleting.push(fileName);
      }
    } else {
      selectedFilesForDeleting = selectedFilesForDeleting.filter(file => file !== fileName);
    }
    deleteButton.textContent = selectedFilesForDeleting.length > 0 ? "Confirm Delete" : "Delete";
  }

  /**
   * Updates the UI based on the current selection of files.
   */
  function updateUIBasedOnSelection() {
    if (isPickSendModeActive) {
      const anyFilesSelected = selectedFilesForSending.length > 0;
      if (anyFilesSelected) {
        selectFileMessage.style.display = "none";
        pickSendButton.style.display = "none";
        sendButton.style.display = "inline-block";
      } else {
        selectFileMessage.style.display = "block";
        sendButton.style.display = "none";
        pickSendButton.style.display = "inline-block";
        pickSendButton.innerText = "Cancel";
        pickSendButton.classList.remove("btn-primary");
        pickSendButton.classList.add("btn-danger");
        sendOptions.style.display = "none";
        pickSendButton.disabled = false;
      }
    }
  }



  /**
   * Toggles between normal and delete modes.
   */
  function toggleDeleteMode() {
    if (isDeleteModeActive) {
      performFileDeletion();
    } else {
      activateDeleteMode();
    }
  }

  /**
   * Activates the delete mode in the UI.
   */
  function activateDeleteMode() {
    deleteInfo.style.display = "block";
    cancelDeleteButton.style.display = "inline-block";
    fileCheckboxes.forEach(checkbox => {
      checkbox.style.display = "inline-block";
      checkbox.checked = false;
    });
    deleteButton.textContent = "Confirm Delete";
    deleteButton.classList.remove('btn-secondary');
    deleteButton.classList.add('btn-danger');
    pickSendButton.style.display = "none";
    isDeleteModeActive = true;
    // Reveal all folders in the folder tree (just like Pick & Send)
    document.querySelectorAll('#folder-tree .sub-items').forEach(el => {
      el.style.display = 'block';
    });
  }

  /**
   * Sends a request to the server to delete selected files.
   */
  function performFileDeletion() {
    if (selectedFilesForDeleting.length > 0) {      
      fetch('/admin/delete-file', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          files: selectedFilesForDeleting
        }),
      })
      .then(response => {
        if (response.ok) {
          alert("Files deleted successfully.");
          location.reload(); // Refresh the page to update the file tree
        } else {
          alert("Failed to delete files.");
        }
      })
      .catch(error => {
        console.error("Error deleting files:", error);
      });
    } else {
      alert("No files selected.");
    }
  }

  /**
   * Cancels the delete mode and resets the UI.
   */
  function cancelDeleteMode() {
    pickSendButton.style.display = "inline-block";
    deleteInfo.style.display = "none";
    cancelDeleteButton.style.display = "none";
    fileCheckboxes.forEach(checkbox => {
      checkbox.style.display = "none";
      checkbox.checked = false;
    });
    deleteButton.textContent = "Delete";
    deleteButton.classList.add('btn-secondary');
    deleteButton.classList.remove('btn-danger');
    isDeleteModeActive = false;
    selectedFilesForDeleting = [];
  }

  // Check if we should auto-activate Pick & Send mode (e.g., after coming from sidebar)
  if (window.location.hash === '#picksend') {
    setTimeout(() => {
      if (typeof activatePickSendMode === 'function') {
        activatePickSendMode();
      } else if (typeof togglePickSendMode === 'function') {
        togglePickSendMode();
      }
    }, 100); // Wait for DOM
  }
});
</script>

<script>
  $(document).ready(function() {
  // Toggle folders
  $(".folder-button").on("click", function() {
    const subItems = $(this).next(".sub-items");
    subItems.toggle();
  });

  // Display file content
  $('.file-name').on('click', function() {
    const fileName = $(this).data('file');

    $.ajax({
      url: '/file-content',
      method: 'GET',
      xhrFields: {
        responseType: 'blob' // Receive the response as a binary Blob
      },
      data: { fileName },
      success: function(blob) {
        const fileUrl = URL.createObjectURL(blob);
        const mimeType = blob.type;

        if (mimeType.startsWith('image/')) {
          $('#file-viewer').html(`<img src="${fileUrl}" alt="${fileName}" class="img-fluid preview-image" />`);
        } else if (mimeType.startsWith('text/')) {
          const reader = new FileReader();
          reader.onload = function(e) {
            $('#file-viewer').html(`<pre class="preview-text">${e.target.result}</pre>`);
          };
          reader.readAsText(blob);
        } else {
          $('#file-viewer').html(`<a href="${fileUrl}" target="_blank">Download ${fileName}</a>`);
        }
      },
      error: function() {
        $('#file-viewer').html('<strong>Error:</strong> Could not load file content.');
      }
    });
  });

  // Open Full-Screen Preview
  $(document).on('click', '#file-viewer', function() {
    const content = $(this).html(); // Get current file content
    $('body').append(`
      <div id="full-screen-preview">
        <div id="preview-content">${content}</div>
        <button id="close-preview">Close</button>
      </div>
    `);
  });

  // Close Full-Screen Preview
  $(document).on('click', '#close-preview', function() {
    $('#full-screen-preview').remove();
  });
});

</script>

<script>

  function loadFilePreview(fileName) {
  $.ajax({
    url: '/file-content',
    method: 'GET',
    xhrFields: {
      responseType: 'blob' // Receive the response as a binary Blob
    },
    data: { fileName },
    success: function(blob) {
      const fileUrl = URL.createObjectURL(blob);
      const mimeType = blob.type;

      if (mimeType.startsWith('image/')) {
        $('#file-viewer').html(`<img src="${fileUrl}" alt="${fileName}" class="img-fluid preview-image" />`);
      } else if (mimeType.startsWith('text/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
          $('#file-viewer').html(`<pre class="preview-text">${e.target.result}</pre>`);
        };
        reader.readAsText(blob);
      } else {
        $('#file-viewer').html(`<a href="${fileUrl}" target="_blank">Download ${fileName}</a>`);
      }
    },
    error: function() {
      $('#file-viewer').html('<strong>Error:</strong> Could not load file content.');
    }
  });
}


  document.addEventListener("DOMContentLoaded", () => {
  const searchInput = document.getElementById('search-input');
  const searchButton = document.getElementById('searchButton');
  const fileSearchInfo = document.getElementById('fileSearchInfo');
  const fileItems = document.querySelectorAll('.file-item');

  const searchResultModal = document.getElementById('searchResultsModal');
  const modalList = document.getElementById('matchedFilesList');
  const closeFilesModalButton = document.getElementById('closeFilesModalButton');

  searchInput.addEventListener('click', () => {
    fileSearchInfo.style.display = 'inline-block';
  });

  searchButton.addEventListener('click', () => {
    const searchDateRaw = searchInput.value.trim();
    const normalizedDate = normalizeDateInput(searchDateRaw);
    if (!searchDateRaw) {
      showNotification("Please enter a valid date in the format (d-m-yyyy)");
      return;
    }
    if (!normalizedDate) {
      showNotification("Invalid format. Please enter date as (day-month-year) like 12-4-2024.");
      return;
    }
    const matchedFiles = filterFileStructure(normalizedDate); // Get matched files
    if (matchedFiles.length === 0) {
      showNotification("No files found for the given date.");
    } else {
      showModal(matchedFiles, normalizedDate); // Show the modal with results and date
      matchedFiles.forEach(revealFileInTree); // Expand folders and highlight
    }
  });

  function normalizeDateInput(input) {
    // Accepts formats like d-m-yyyy, dd-mm-yyyy, d.mm.yyyy, d m yyyy, d/m/yyyy, etc.
    // Remove all extra spaces and replace with single dash
    input = input.trim().replace(/[\s\/\.]+/g, '-');
    const match = input.match(/^0*(\d{1,2})-0*(\d{1,2})-(\d{4})$/);
    if (!match) return null;
    const day = String(Number(match[1]));   // Remove leading zeros
    const month = String(Number(match[2])); // Remove leading zeros
    const year = match[3];
    return `${day}-${month}-${year}`;
  }

  // Notification modal
  window.showNotification = function(message) {
    let notif = document.getElementById('customNotificationModal');
    if (!notif) {
      notif = document.createElement('div');
      notif.id = 'customNotificationModal';
      notif.style.position = 'fixed';
      notif.style.top = '0';
      notif.style.left = '0';
      notif.style.width = '100vw';
      notif.style.height = '100vh';
      notif.style.background = 'rgba(0,0,0,0.4)';
      notif.style.display = 'flex';
      notif.style.justifyContent = 'center';
      notif.style.alignItems = 'center';
      notif.style.zIndex = 10000;
      notif.innerHTML = `<div style="background: white; padding: 30px 40px; border-radius: 12px; box-shadow: 0 4px 24px rgba(0,0,0,0.18); font-size: 1.2rem; min-width: 250px; text-align: center;">
        <span>${message}</span><br><br>
        <button class="btn btn-primary" id="closeNotificationModal">OK</button>
      </div>`;
      document.body.appendChild(notif);
      document.getElementById('closeNotificationModal').onclick = function() {
        notif.remove();
      };
    }
  }

  function revealFileInTree(fileName) {
    // Find the file-name span
    const fileSpan = document.querySelector(`.file-name[data-file='${fileName}']`);
    if (!fileSpan) return;
    // Traverse up to open all parent .sub-items
    let parent = fileSpan.parentElement;
    while (parent) {
      if (parent.classList && parent.classList.contains('sub-items')) {
        parent.style.display = 'block';
      }
      parent = parent.parentElement;
    }
    // Highlight only the matched file
    fileSpan.style.background = '#ffff99';
  }

  function filterFileStructure(searchDate) {
    const matchedFiles = [];
    fileItems.forEach(fileItem => {
      const fileName = fileItem.querySelector('.file-name').getAttribute('data-file');
      // Remove any previous highlight
      fileItem.querySelector('.file-name').style.background = '';
      // Match _d-m-yyyy. or -d-m-yyyy. or .d-m-yyyy. or space before extension
      const regex = new RegExp(`[\\s_\\-\\.]${searchDate}\\.`);
      if (regex.test(fileName)) {
        matchedFiles.push(fileName);
      }
      // Always show all files
      fileItem.style.display = "block";
    });
    return matchedFiles;
  }

  function showModal(matchedFiles, normalizedDate) {
    modalList.innerHTML = ""; // Clear old results
    // Set modal title to show the formatted date
    const modalTitle = document.querySelector('#filesModalContent h2');
    if (modalTitle && normalizedDate) {
      modalTitle.innerHTML = `<i class='fa fa-calendar text-primary'></i> <span style='font-size:1.1em;'>Files uploaded on <b>${formatDateForDisplay(normalizedDate)}</b></span>`;
    }
    matchedFiles.forEach((fileName, index) => {
      const li = document.createElement('li');
      li.innerHTML = `<span class=\"modal-file-name\" data-file=\"${fileName}\" style=\"padding: 8px 12px; border-radius: 6px; background: #f5f7fa; margin-bottom: 6px; display: inline-block; cursor:pointer; transition: background 0.2s;\">${index + 1}. <b>${fileName}</b></span>`;
      modalList.appendChild(li);
    });
    // Enhance modal design
    const modalContent = document.getElementById('filesModalContent');
    if (modalContent) {
      modalContent.style.boxShadow = '0 6px 32px rgba(0,0,0,0.18)';
      modalContent.style.border = '1px solid #e3e3e3';
      modalContent.style.background = 'linear-gradient(135deg, #f8fafc 0%, #e9ecef 100%)';
    }
    searchResultModal.style.display = "flex";
    // Add click event to modal file names
    document.querySelectorAll('.modal-file-name').forEach(fileEl => {
      fileEl.addEventListener('click', function() {
        const fileName = this.getAttribute('data-file');
        loadFilePreview(fileName); // Call file preview
        searchResultModal.style.display = "none";
      });
    });
  }

  // Add this function in the same scope as showModal
  function formatDateForDisplay(normalizedDate) {
    // normalizedDate is always d-m-yyyy (no leading zeros)
    const [d, m, y] = normalizedDate.split('-');
    // Pad day and month for display
    const day = d.padStart(2, '0');
    const month = m.padStart(2, '0');
    return `${day}-${month}-${y}`;
  }

  closeFilesModalButton.addEventListener('click', () => {
    searchResultModal.style.display = "none";
  });
});

</script>

