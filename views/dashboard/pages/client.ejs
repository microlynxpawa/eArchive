<!-- This component is not necessary it is just a redesigned version of audit trail -->
<div class="container-fluid">
  <div class="mb-3">
    <div class="input-group">
      <div class="input-group-prepend " id="searchButton">
        <span class="input-group-text mobile-search"><i class="fa fa-search"></i></span>
      </div>
      <input 
        id="search-input" 
        class="form-control" 
        type="text" 
        placeholder="Search Here........"
      >
    </div>
  </div>
  <div class="row">
    <div class="col-12">
      <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
          <h3 class="mb-0">User Audit Trail</h3>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered align-middle text-center" id="audit-log-table">
              <thead class="table-dark">
                <tr>
                  <th>Name</th>
                  <th>Login Time</th>
                  <th>Logout Time</th>
                  <th>Created At</th>
                  <th>Updated At</th>
                </tr>
              </thead>
              <tbody id="audit-log-tbody">
                <!-- Audit logs will be dynamically inserted here -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<%- contentFor("pageHeader") %> 
<%- include('../components/page-title.ejs', {title: 'Audit trail' }) %> 
<%- contentFor("customJS") %>
<script>
  // Toast notification utility
  function showToast(message, type = 'success') {
    let toast = document.createElement('div');
    toast.className = 'custom-toast-notification ' + (type === 'success' ? 'toast-success' : 'toast-error');
    toast.innerText = message;
    toast.style.position = 'fixed';
    toast.style.bottom = '30px';
    toast.style.right = '30px';
    toast.style.background = type === 'success' ? '#22c55e' : '#dc3545';
    toast.style.color = '#fff';
    toast.style.padding = '16px 28px';
    toast.style.borderRadius = '8px';
    toast.style.fontSize = '1.1rem';
    toast.style.boxShadow = '0 2px 12px rgba(0,0,0,0.18)';
    toast.style.zIndex = 12000;
    document.body.appendChild(toast);
    setTimeout(() => { toast.remove(); }, 2500);
  }
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('searchButton');

    // Function to fetch and display audit logs for a user
    const fetchAndDisplayAuditLogs = async (userId) => {
      try {
        const response = await fetch(`audit-log/${encodeURIComponent(userId)}`);
        if (!response.ok) throw new Error('Failed to fetch audit logs.');

        const logs = await response.json();
        const tbody = document.getElementById('audit-log-tbody');
        tbody.innerHTML = ''; // Clear previous data
        console.log("This is logs: "+logs);
        
        logs.forEach(log => {
          const row = `
            <tr>
              <td>${log.name || 'N/A'}</td>
              <td>${log.loginTime ? new Date(log.loginTime).toLocaleString() : 'N/A'}</td>
              <td>${log.logoutTime ? new Date(log.logoutTime).toLocaleString() : 'N/A'}</td>
              <td>${new Date(log.createdAt).toLocaleString()}</td>
              <td>${new Date(log.updatedAt).toLocaleString()}</td>
            </tr>
          `;
          tbody.insertAdjacentHTML('beforeend', row);
        });

        // Initialize DataTable after updating the table
        if (typeof $.fn.DataTable !== 'undefined') {
          $('#audit-log-table').DataTable();
        }
      } catch (error) {
        console.error('Error fetching audit logs:', error);
        showToast('Failed to fetch audit logs.', 'error');
      }
    };

    // Handle search button click
    searchButton.addEventListener('click', async () => {
      const username = searchInput.value.trim();

      if (!username) {
        showToast('Please enter a username.', 'error');
        return;
      }

      try {
        const response = await fetch(`/admin/getUser/${encodeURIComponent(username)}`);
        if (!response.ok) throw new Error('Failed to fetch user.');

        const userData = await response.json();
        showToast(`User found: ${userData.fullname} (${userData.username})`, 'success');
        fetchAndDisplayAuditLogs(userData.id);
      } catch (error) {
        console.error('Error fetching user:', error);
        showToast('User not found or an error occurred.', 'error');
      }
    });
  });
</script>
